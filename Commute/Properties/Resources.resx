<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <data name="Account" xml:space="preserve"> <value>Account name</value> </data>
  <data name="Amazon picture HTTP" xml:space="preserve"> <value>https://s3-eu-west-1.amazonaws.com/commute/Pictures/</value> </data>
  <data name="Application name" xml:space="preserve"> <value>Commute</value> </data>
  <data name="Cancel" xml:space="preserve"> <value>Cancel</value> </data>
  <data name="Change password" xml:space="preserve"> <value>Change password</value> </data>
  <data name="Co2 per person" xml:space="preserve"> <value>CO2 per person</value> </data>
  <data name="Co2 saved" xml:space="preserve"> <value>CO2 saved</value> </data>
  <data name="Compute cost" xml:space="preserve"> <value>Compute cost</value> </data>
  <data name="Consumption" xml:space="preserve"> <value>Consumption</value> </data>
  <data name="Cost per person" xml:space="preserve"> <value>Cost per person</value> </data>
  <data name="Create account" xml:space="preserve"> <value>Create account</value> </data>
  <data name="Dir image upload" xml:space="preserve"> <value>/Content/Images/Upload/</value> </data>
  <data name="Distance" xml:space="preserve"> <value>Distance</value> </data>
  <data name="Email" xml:space="preserve"> <value>E-mail address</value> </data>
  <data name="Error database access" xml:space="preserve"> <value>Database error</value> </data>
  <data name="Error duplicate account" xml:space="preserve"> <value>This account already exists</value> </data>
  <data name="Error invalid mail" xml:space="preserve"> <value>This does not look like a valid mail address</value> </data>
  <data name="Error wrong mail" xml:space="preserve"> <value>This mail does not match this account</value> </data>
  <data name="Error string too long" xml:space="preserve"> <value>String is too long</value> </data>
  <data name="Error unknown account" xml:space="preserve"> <value>This account does not exists</value> </data>
  <data name="Error wrong password" xml:space="preserve"> <value>Wrong password, did you forget it...too bad !</value> </data>
  <data name="Forum" xml:space="preserve"> <value>Forum</value> </data>
  <data name="From" xml:space="preserve"> <value>From</value> </data>
  <data name="Fuel cost" xml:space="preserve"> <value>Fuel cost</value> </data>
  <data name="Fuel used" xml:space="preserve"> <value>Fuel used</value> </data>
  <data name="Guest" xml:space="preserve"> <value>Guest</value> </data>
  <data name="Hello" xml:space="preserve"> <value>Hello</value> </data>
  <data name="Help" xml:space="preserve"> <value>Help</value> </data>
  <data name="Location create" xml:space="preserve"> <value>Create new location</value> </data>
  <data name="Location name" xml:space="preserve"> <value>Location name</value> </data>
  <data name="Location update" xml:space="preserve"> <value>Update location</value> </data>
  <data name="Location type" xml:space="preserve"> <value>Type</value> </data>
  <data name="Login" xml:space="preserve"> <value>Login</value> </data>
  <data name="Logout" xml:space="preserve"> <value>Logout</value> </data>
  <data name="Mandatory" xml:space="preserve"> <value>This field is mandatory</value> </data>
  <data name="Map" xml:space="preserve"> <value>Map</value> </data>
  <data name="Menu" xml:space="preserve"> <value>Menu</value> </data>
  <data name="My name" xml:space="preserve"> <value>My name is</value> </data>
  <data name="Msg confirm mail sending" xml:space="preserve"> <value>A mail will be sent to the other user with your mail.&lt;div&gt;Do you agree ?&lt;/div&gt;</value> </data>
  <data name="Msg error db" xml:space="preserve"> <value>Database system error</value> </data>
  <data name="Msg error db user" xml:space="preserve"> <value>Cannot retrieve user data from database</value> </data>
  <data name="Msg password updated" xml:space="preserve"> <value>You password has been updated.</value> </data>
  <data name="Msg sending mail" xml:space="preserve"> <value>We are now sending you a mail with the new password</value> </data>
  <data name="Name" xml:space="preserve"> <value>Name</value> </data>
  <data name="No record" xml:space="preserve"> <value>This record does not exists</value> </data>
  <data name="Offer" xml:space="preserve"> <value>Offer</value> </data>
  <data name="Ok" xml:space="preserve"> <value>OK</value> </data>
  <data name="Password" xml:space="preserve"> <value>Password</value> </data>
  <data name="Password min" xml:space="preserve"> <value>password</value> </data>
  <data name="Password confirm" xml:space="preserve"> <value>Confirm password</value> </data>
  <data name="Password old" xml:space="preserve"> <value>Old password</value> </data>
  <data name="Password updated" xml:space="preserve"> <value>Password updated</value> </data>
  <data name="Password reset" xml:space="preserve"> <value>Reset password</value> </data>
  <data name="Person in car" xml:space="preserve"> <value>Person in car</value> </data>
  <data name="Picture" xml:space="preserve"> <value>Picture</value> </data>
  <data name="Previous page" xml:space="preserve"> <value>Previous page</value> </data>
  <data name="Quick start guide" xml:space="preserve"> <value>Quick start guide</value> </data>
  <data name="Register" xml:space="preserve"> <value>Register</value> </data>
  <data name="Route" xml:space="preserve"> <value>Route</value> </data>
  <data name="Route create" xml:space="preserve"> <value>Create route</value> </data>
  <data name="Route create update" xml:space="preserve"> <value>Update route</value> </data>
  <data name="Route id" xml:space="preserve"> <value>Route no</value> </data>
  <data name="Route new" xml:space="preserve"> <value>New route</value> </data>
  <data name="Route list" xml:space="preserve"> <value>My routes</value> </data>
  <data name="Route search" xml:space="preserve"> <value>Search route</value> </data>
  <data name="Route view" xml:space="preserve"> <value>View route</value> </data>
  <data name="Save" xml:space="preserve"> <value>Save</value> </data>
  <data name="Search" xml:space="preserve"> <value>Search</value> </data>
  <data name="Seek" xml:space="preserve"> <value>Seek</value> </data>
  <data name="To" xml:space="preserve"> <value>To</value> </data>
  <data name="Toll" xml:space="preserve"> <value>Toll</value> </data>
  <data name="Update" xml:space="preserve"> <value>Update</value> </data>
  <data name="Update account" xml:space="preserve"> <value>Update account</value> </data>
  <data name="Update data" xml:space="preserve"> <value>Update data</value> </data>
  <data name="Update picture" xml:space="preserve"> <value>Update picture</value> </data>
  <data name="User" xml:space="preserve"> <value>User</value> </data>
  <data name="User account" xml:space="preserve"> <value>User account</value> </data>
  <data name="User login" xml:space="preserve"> <value>User login</value> </data>
  <data name="User logout" xml:space="preserve"> <value>User logout</value> </data>
  <data name="User registration" xml:space="preserve"> <value>User registration</value> </data>
  <data name="User set location" xml:space="preserve"> <value>Set location</value> </data>
  <data name="Your account" xml:space="preserve"> <value>Your account</value> </data>
  <data name="Welcome" xml:space="preserve"> <value>Welcome</value> </data>
  <data name="Mail contact mail title" xml:space="preserve"> <value>Commute – Contact request</value> </data>
  <data name="Mail contact title" xml:space="preserve"> <value>We have matching routes</value> </data>
  <data name="Mail contact msg" xml:space="preserve"> <value>I have found that our commute routes are quite similar, can we get in touch to see if we can commute togther ?</value> </data>
  <data name="Mail contact reply" xml:space="preserve"> <value>Just reply to this mail to contact me (you will see my mail address).</value> </data>
  <data name="Mail contact map" xml:space="preserve"> <value>The map below shows our two routes:</value> </data>
  <data name="Mail contact map title" xml:space="preserve"> <value>This map is just a picture. Click the map to view it as a Goole map in Commute.</value> </data>
  <data name="Mail password reset" xml:space="preserve"> <value>We reset your password with the value: </value> </data>
  <data name="Mail password first" xml:space="preserve"> <value>First,</value> </data>
  <data name="Mail password login" xml:space="preserve"> <value>login</value> </data>
  <data name="Mail password to" xml:space="preserve"> <value>to Commute with this new password.</value> </data>
  <data name="Mail password use" xml:space="preserve"> <value>Then, use the</value> </data>
  <data name="Mail password update" xml:space="preserve"> <value>screen to change your password.</value> </data>
  <data name="Mail welcome welcome" xml:space="preserve"> <value>Welcome to Commute !</value> </data>
  <data name="Mail welcome created" xml:space="preserve"> <value>has been sucessfuly created. &lt;p&gt;You can now register routes and find commuters with similar routes as yours.&lt;/p&gt;</value> </data>
  <data name="Mail welcome start" xml:space="preserve"> <value>To get started, read the</value> </data>
  <data name="Mail welcome forum" xml:space="preserve"> <value>To register issues, ask for help, request features use the</value> </data>
  <data name="Mail commute end greeting" xml:space="preserve"> <value>Wish you a safe and fun commute, the Commute Team.</value> </data>
  <data name="Mail welcome safe commute" xml:space="preserve"> <value>Wish you a safe and fun commute, the Commute Team.</value> </data>
  <data name="Welcome account" xml:space="preserve"> <value>Complete your account data and upload your picture</value> </data>
  <data name="Welcome help" xml:space="preserve"> <value>Read the quick start documentation to have an overview of Commute features.</value> </data>
  <data name="Welcome join" xml:space="preserve"> <value>First, create an account to join Commute community</value> </data>
  <data name="Welcome login button press" xml:space="preserve"> <value>Press the</value> </data>
  <data name="Welcome login button" xml:space="preserve"> <value>button to login to Commute</value> </data>
  <data name="Welcome mail" xml:space="preserve"> <value>We just sent you a welcome mail with more instructions at your address: </value> </data>
  <data name="Welcome message" xml:space="preserve"> <value>Welcome to Commute, the green and friendly way to commute.
&lt;div&gt;- Define the commute routes you seek/offer&lt;/div&gt;
&lt;div&gt;- Find other commuters with similar route&lt;/div&gt;
&lt;div&gt;- Get in touch with them to commute together&lt;/div&gt;
&lt;div&gt;- Keep track of the expenses to share&lt;/div&gt;</value> </data>
  <data name="Welcome registred" xml:space="preserve"> <value>to Commute community.</value> </data>
  <data name="Welcome route" xml:space="preserve"> <value>And then you are ready to define your first commuting route</value> </data>
  <data name="Welcome set location" xml:space="preserve"> <value>Set your default location</value> </data>
  <data name="Welcome view route" xml:space="preserve"> <value>Alternatively, you can view available routes for your commute path witout creating an account.</value> </data>
  <data name="Wtitle confirmation" xml:space="preserve"> <value>Please confirm</value> </data>
  <data name="Metadesc default" xml:space="preserve"> <value>Carpooling consists in sharing your car to commute between home and work with others or find a car in your area with someone driving. Going to work can be fun: Save fuel, save money and make new friends to share a happy time when commuting. This is the green way to go to work. Help saving the planet. Reduce gaz emission.</value> </data>

  <data name="Metadesc compute cost" xml:space="preserve"> <value>Evaluate the cost of your route and how to share it with users sharing your car. Carpooling consists in sharing your car to commute between home and work with others or find a car in your area with someone driving. Going to work can be fun: Save fuel, save money and make new friends to share a happy time when commuting. This is the green way to go to work. Help saving the planet. Reduce gaz emission.</value> </data>
  <data name="Metadesc home welcome" xml:space="preserve"> <value>Welcome to Commute the green and friendly way to commute. Find routes in your area. Get started with Commute. Joint Commute community. Carpooling consists in sharing your car to commute between home and work with others or find a car in your area with someone driving. Going to work can be fun: Save fuel, save money and make new friends to share a happy time when commuting. This is the green way to go to work. Help saving the planet. Reduce gaz emission.</value> </data>
  <data name="Metadesc user setlocation" xml:space="preserve"> <value>Set default map location when creating new route. Commute is a friendly and green way to commute between home and work. Carpooling consists in sharing your car to commute between home and work with others or find a car in your area with someone driving. Going to work can be fun: Save fuel, save money and make new friends to share a happy time when commuting. This is the green way to go to work. Help saving the planet. Reduce gaz emission.</value> </data>
  <data name="Metadesc route list" xml:space="preserve"> <value>This is the list of routes you have defined. You can update the route. You can search route which are close match to your route. You can create new route. Carpooling consists in sharing your car to commute between home and work with others or find a car in your area with someone driving. Going to work can be fun: Save fuel, save money and make new friends to share a happy time when commuting. This is the green way to go to work. Help saving the planet. Reduce gaz emission.</value> </data>
</root>
