@model Commute.Models.RouteCompare
@*RouteView*@
@using Commute.Properties

@{
    Layout = "~/Views/Shared/_Mobile.cshtml";
}

@*
Route1 = my route
Route2 = other user's route
*@


@{ ViewBag.Title = @Resources.Route_view + " no " + @Model.RouteId2; }

@*These div are only used to get color from CSS*@
<div id="seekColor" class="seek"></div>
<div id="offerColor" class="offer"></div>

@*---------------------------------*@
@*Popup to confirm mail sending    *@
@*---------------------------------*@
<div id="popupConfirmation" data-role="popup" data-rel="dialog" data-overlay-theme="a" class="ui-corner-all" style="width: 300px;">
    <div data-role="header" class="ui-bar ui-bar-b">
		<h1 style="margin-left: 5px; margin-right: 5px;">@Resources.Wtitle_confirmation</h1>
	</div>
    <div data-role="content" class="ui-corner-bottom ui-content">
        @Html.Raw(@Resources.Msg_confirm_mail_sending)
        <button value="@Resources.Ok" onclick="SendMail();"  data-inline="true" data-ajax="false"></button>
        <button value="@Resources.Cancel" onclick="$( '#popupConfirmation' ).popup( 'close' );" data-inline="true" data-ajax="false"></button>
    </div>
</div>

@*Map*@
<div id="divMap" style="width:100%;position: absolute; top: 54px; left: 0px; bottom: 0px;"></div>

@*Contact button - send mail to contact with other user*@
<div id="divContact">
    <a id="btnContact" type="button" href="#popupConfirmation" data-rel="popup" data-position-to="window" data-inline="true" data-theme="b" data-icon="check" data-iconpos="notext" ></a>
</div>
@*Cancel button*@
<div id="divCancel">
    <button id="btnCancel" type="button" data-inline="true" data-ajax="false" data-theme="b" data-icon="delete" data-iconpos="notext" ></button>
</div>

<script>
    //Global variables
    var routeWayPoint = []; //an array of WayPoint 0=start, 1=end, next are real way points
    var myRouteWayPoint = [];
    var map //Google map
    var directionsDisplay //display route
    //var myRouteDirectionsDisplay //display route

    //----------
    //Functions
    //----------

    function InitializeRouteMap() {
        //alert(routeWayPoint.length);

        //TMP - later we should get center in another way
        var mapCenter = new google.maps.LatLng(39.907004, 116.39759); //Center on Beijing Tian An Men

        var zoomControl = {
            //position: google.maps.ControlPosition.TOP_LEFT,
            style: google.maps.ZoomControlStyle.SMALL
        }
        //Define map properties
        var mapProp = {
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            panControl: false,
            streetViewControl: false,
            mapTypeControl: false,
            zoomControlOptions: zoomControl
        };
        //Display the map in the div
        map = new google.maps.Map(document.getElementById("divMap"), mapProp);
        //Expand the size of the div for the map
        //$('#divMap').css("height", "200px");
        //Force map to expand to div
        setTimeout(function () { google.maps.event.trigger(map, 'resize'); map.setCenter(mapCenter); }, 100);

        //Add control to the map - cancel button
        var divContact = document.createElement('divContact'); //Create a new control
        var divCancel = document.createElement('divCancel'); //Create a new control
        divContact.innerHTML = $('#divContact').html(); //Use the HTML of the button
        divCancel.innerHTML = $('#divCancel').html(); //Use the HTML of the button
        $('#divContact').hide(); //Hide the original button
        $('#divCancel').hide(); //Hide the original button
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(divCancel);
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(divContact);
        google.maps.event.addDomListener(divContact, 'click', function (event) {
            //$( "#popupConfirmation2" ).popup(); //Popup to confirm mail sending
        });
        google.maps.event.addDomListener(divCancel, 'click', function (event) {
            window.location = "/Route/List/"; //Return to my route
        });

        DisplayRouteMarker(routeWayPoint, @Model.IsOffer2.ToString().ToLower());

        //Create object to display route
        var polyOptions = {
            strokeColor: ("@Model.IsOffer2" == "True") ? $('#offerColor').css("background-color") : $('#seekColor').css("background-color"), //Offer=red, Seek=green
            strokeWeight: 5
        }
        var rendererOptions = {
            //preserveViewport: true, //Do not resize map on start/end point
            polylineOptions: polyOptions,
            suppressMarkers: true //Do not display default A, B, C makers
        };
        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        directionsDisplay.setMap(map);
        //myRouteDirectionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        //myRouteDirectionsDisplay.setMap(map);
        
        //Display the route
        UpdateRoute(routeWayPoint, directionsDisplay);

    } //InitializeRouteMap

    //Convert RGB color to hexa
    function rgb2hex(rgb) {
        rgb = rgb.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/);
        function hex(x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        }
        return hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
    }

function DisplayRouteMarker(routeWayPoint, isOffer) {
    //Marker color according to CSS class
    var markerColor;
    if ( isOffer ) markerColor = rgb2hex($('#offerColor').css("background-color"));
    else markerColor = rgb2hex($('#seekColor').css("background-color"));
    
    //Display the way points
    for (i = 0; i < routeWayPoint.length; i++) {
        switch (i) {
            case 0: //Start point
                CreateMarker(new google.maps.LatLng(routeWayPoint[0].Latitude, routeWayPoint[0].Longitude), 1, true, 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=A|' + markerColor +'|000000'); //6BC54D
                break;
            case 1: //End point
                CreateMarker(new google.maps.LatLng(routeWayPoint[1].Latitude, routeWayPoint[1].Longitude), 2, true, 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=B|' + markerColor +'|000000');
                break;
            default: //Way points
                CreateMarker(new google.maps.LatLng(routeWayPoint[i].Latitude, routeWayPoint[i].Longitude), i + 1, true, 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + (i - 1) + '|' + markerColor +'|000000');
        }
    }
}

function CreateMarker(location, id, draggable, icon) {
    //id(=RouteWayPoint.LineId):1=start, 2=end, 3...=way points
    //optional draggable: default = true
    draggable = typeof draggable !== 'undefined' ? draggable : true;

    var marker = new google.maps.Marker({
        position: location,
        id: id,
        //draggable: draggable,
        icon: icon,
        map: map
    });

        //TMP - Would be useful to display some info to identify each route
        //Add maker event to display marker coordinates
        google.maps.event.addListener(marker, "mouseover", function(event) {
            //alert(marker.position.lat().toString() + "/" + marker.position.lng().toString());
            //new google.maps.infoWindow({
            //    map: map,
            //    position: event.latLng,
            //    content: "Hello" //marker.position.lat().toString() + "/" + marker.position.lng().toString()
            //});
            ////infowindow.open(map);
        });
    } //CreateMarker

    //Refresh the route on the map with data in routeWayPoint
    function UpdateRoute(routeWayPoint, directionsDisplay) {

        if (routeWayPoint.length < 2 ) return; //Less than 2 points no route to display

        //Create directionService to request route to Google
        var directionsService = new google.maps.DirectionsService();

        //Initialize waypoint array
        var waypoint;
        var waypoints = [];
        for (i = 2; i < routeWayPoint.length; i++) {
            waypoint = {
                location: new google.maps.LatLng(routeWayPoint[i].Latitude, routeWayPoint[i].Longitude)
               }
            waypoints.push(waypoint);
        }

        //Request the route to google
        var request = {
            origin: new google.maps.LatLng(routeWayPoint[0].Latitude, routeWayPoint[0].Longitude),
            destination: new google.maps.LatLng(routeWayPoint[1].Latitude, routeWayPoint[1].Longitude),
            waypoints: waypoints,
            travelMode: google.maps.DirectionsTravelMode.DRIVING,
            optimizeWaypoints: true
        };
        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections({routes: []});
                directionsDisplay.setDirections(response); //Display route
                //alert("Route displayed");

                //////After the route is displayed first time do not allow the map viewport to resize

                //setTimeout(function () { directionsDisplay.setOptions(rendererOptions); }, 10);
                
            }
            else alert(status + "/" + response);
        });
    }

    //Synchronous Ajax to get route and way points
    function GetWayPoint(routeId, routeWayPoint) {
        var milliseconds = new Date().getMilliseconds();
        $.ajax({ 
            'async': false, 'url': '/Route/WayPoint/' + routeId + '?' + milliseconds, 'type': 'get', 'dataType': 'json', //?id=
            'success': function (data) {
                for ( i = 0; i < data.Data.length; i++ ) {
                    routeWayPoint.push(data.Data[i]);
                }
            }
        });
    }

    //                
    function SendMail() {
        //Display the mail sent for testing purpose
        window.location = '/Mail/Contact?fromRouteId=' + @Model.RouteId1 + '&toRouteId=' + @Model.RouteId2;
        $.ajax({ 
            'async': false, 'url': '/Mail/MailContact?fromRouteId=' + @Model.RouteId1 + '&toRouteId=' + @Model.RouteId2,
            'success': function (data) {
                alert('Mail sent');
            }
        });
        $( '#popupConfirmation' ).popup( 'close' );
    }

    jQuery(document).ready(function () {
        //alert( "route1=" + @Model.RouteId1 + ", "  + "route2=" + @Model.RouteId2 );
        //alert( "route1=" + @Model.IsOffer1 + ", "  + "route2=" + @Model.IsOffer2 );
        GetWayPoint(@Model.RouteId2, routeWayPoint); //Synchronous AJAX to get waypoint necessary to draw map for other user route
        var querystring = location.search.split( '=' );
        var myIsOffer = @Model.RouteId1; //querystring[2];
        GetWayPoint(@Model.RouteId1, myRouteWayPoint); //Synchronous AJAX to get waypoint necessary to draw map for my route
        InitializeRouteMap();

        DisplayRouteMarker(myRouteWayPoint, @Model.IsOffer1.ToString().ToLower());
        var polyOptions = {
            //To not hardcode color we get is from useless div assigned the class
            strokeColor: ("@Model.IsOffer1" == "True") ? $('#offerColor').css("background-color") : $('#seekColor').css("background-color"), //Offer=red, Seek=green
            strokeWeight: 5
        }
        rendererOptions = {
            preserveViewport: true, //Do not resize map on start/end point
            polylineOptions: polyOptions,
            suppressMarkers: true //Do not display default A, B, C makers
        };
        myRouteDirectionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        myRouteDirectionsDisplay.setMap(map);

        myRouteDirectionsDisplay.setOptions(rendererOptions);
        UpdateRoute(myRouteWayPoint, myRouteDirectionsDisplay);

        //Useless if we move to UI dialog
        //$("#btnSave").click(function() {
        //    for ( i=0; i<routeWayPoint.length; i++) {
        //        delete routeWayPoint[i].marker;
        //    }
        //    var routeToPost = JSON.stringify(routeWayPoint); //JSON.stringify(RouteToPost());
        //    $.ajax({ 
        //        url: '/Route/CreateUpdate/', 'type': 'post',
        //        data: routeToPost,
        //        //dataType: 'json',
        //        contentType: 'application/json; charset=utf-8',
        //        success: function (data, textStatus, jqXHR) {
        //            var nextView = data;
        //            UpdateRoute(data);
        //            window.location = data;
        //        },
        //        error: function (jqXHR, data) {
        //            window.location = data;
        //        }
        //        //statusCode: {
        //        //    302: function(jqXHR) {
        //        //        test(jqXHR);
        //        //        // your code
        //        //    }
        //        //}
        //    });
        //});

        //$("#btnCancel").click(function() {
        //    window.location = "/Route/List"; //Mobile?userId=" + Model.UserId;
        //});
    });

</script>
