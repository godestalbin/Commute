@model Commute.Models.User
@using Commute.Properties
@using Cloudinary.Mvc;
@using Cloudinary;

@{ 
    Layout = "~/Views/Shared/_Mobile.cshtml";
    ViewBag.Title = @Resources.Update_account;
}

@using (Html.BeginForm( "Edit", "User", FormMethod.Post, new Dictionary<string, object>
    {
        { "data-ajax", "false" }, 
    } )) {
@Html.ValidationSummary(true)
    <table>
        <tr>
            <td>@Html.LabelFor(model => model.Id)</td>
            <td>@*<div class="non-editable-data">@String.Format("{0:00000000}",@Model.Id)</div>*@
                @Html.TextBoxFor(model => model.Id, new Dictionary<string, object>
    {
        { "disabled", "true" },
        { "class", "account non-editable-data" }, 
    })
            </td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Account)</td>
            <td>@Html.TextBoxFor(model => model.Account, new Dictionary<string, object>
    {
        { "disabled", "true" },
        { "class", "account non-editable-data" }, 
    })
            </td>
            @Html.Hidden("Id", @Model.Id) @*Account Id need to be posted to identify user*@
            @Html.Hidden("Account", @Model.Account) @*Account Account need to be posted because mandatory*@
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Name)</td>
            <td>
                @Html.TextBoxFor(model => model.Name, new { @class = "user-name" } )
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.EmailAddress)</td>
            <td>
                @Html.TextBoxFor(model => model.EmailAddress, new { @class = "email" } )
                @Html.ValidationMessageFor(model => model.EmailAddress)
                @Html.Hidden("Password", @Model.Password) @*Password is mandatory so we include it here*@
                @Html.Hidden("PictureVersion", @Model.PictureVersion) @*We add it here to keep the value when saving*@
            </td>
        </tr>
        <tr>
            <td></td>
            <td><input type="submit" data-inline="true"  value="@Resources.Update_data"/></td>
        </tr>
    </table>
}

                @*<img id="userImage" class="user-image" src="@Url.Content(Resources.Amazon_picture_HTTP + @String.Format("{0:00000000}", @Model.Id) + ".jpg?" + DateTime.Now.Millisecond)"/>*@
                @*<img id="userImage" class="user-image" src="@(@Url.CloudinaryImage(@String.Format("{0:00000000}", @Model.Id), new Transformation(100, 100)) + "?" + DateTime.Now.Millisecond)"/>*@
                @*<img id="userImage" class="user-image" src="@(@Url.CloudinaryImage(@String.Format("{0:00000000}", @Model.Id), new Transformation(100, 100) { Format = "png", Crop = CropMode.Thumb, Gravity = Gravity.Face, Radius = 10 }) + "?" + DateTime.Now.Millisecond)"/>*@
                @if( Model.PictureVersion != null ) {
                <img id="userImage" class="user-image" src="@Url.CloudinaryImage("v" + @Model.PictureVersion + "/" + @String.Format("{0:00000000}", @Model.Id), new Transformation(100, 100) { Format = "png", Crop = CropMode.Thumb, Gravity = Gravity.Face, Radius = 8 })"/> } @*, Angle = new Angle(180)*@
                else { <img id="userImage" class="user-image" src="@Url.CloudinaryImage("Unknown")"/> }
                @Html.Partial("UploadFile", new Commute.Models.Entity { Id = @Model.Id } )


@*<div class="custom-upload">
    <input type="file">
    <div class="fake-file">
        @if( Model.PictureVersion != null ) {
                <img id="userImage2" class="user-image" src="@Url.CloudinaryImage("v" + @Model.PictureVersion + "/" + @String.Format("{0:00000000}", @Model.Id), new Transformation(100, 100) { Format = "png", Crop = CropMode.Thumb, Gravity = Gravity.Face, Radius = 8 })"/> } 
                else { <img id="userImage2" class="user-image" src="@Url.CloudinaryImage("Unknown")"/> }
        <input disabled="disabled" >
    </div>
</div>​*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $('.custom-upload input[type=file]').change(function(){
        $(this).next().find('input').val($(this).val());
        alert("we can upload here");
    });​
</script>
}
